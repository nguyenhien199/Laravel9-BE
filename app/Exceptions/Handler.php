<?php

namespace App\Exceptions;

use App\Constants\AppConst;
use App\Constants\ResponseConst;
use App\Http\Responses\Traits\ApiResult;
use App\Http\Responses\Traits\WebResult;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

/**
 * Class Handler
 *
 * @package App\Exceptions
 */
class Handler extends ExceptionHandler
{
    use WebResult,
        ApiResult;

    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        \App\Exceptions\GeneralException::class,
        \App\Exceptions\DataNotFoundException::class,

        \Tymon\JWTAuth\Exceptions\JWTException::class,
        \Tymon\JWTAuth\Exceptions\TokenExpiredException::class,
        \Tymon\JWTAuth\Exceptions\TokenInvalidException::class,
        \Tymon\JWTAuth\Exceptions\TokenBlacklistedException::class,
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            // TODO: Change the autogenerated stub.
        });
    }

    /**
     * Report or log an exception.
     *
     * @param Throwable $e
     * @return void
     * @throws Throwable
     */
    public function report(Throwable $e): void
    {
        // TODO: Change the autogenerated stub.
        parent::report($e);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Throwable               $e
     * @return \Symfony\Component\HttpFoundation\Response
     * @throws \Throwable
     */
    public function render($request, Throwable $e): \Symfony\Component\HttpFoundation\Response
    {
        if ($request->wantsJson() && AppConst::isApiUrlRequest($request)) {
            if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException) {
                return $this->unauthorizedApiResult(ResponseConst::CODE_TOKEN_EXPIRED, __('messages.token.error.expired'), $e::class);
            }
            elseif ($e instanceof \Tymon\JWTAuth\Exceptions\TokenBlacklistedException) {
                return $this->unauthorizedApiResult(ResponseConst::CODE_UNAUTHORIZED, __('messages.token.error.blacklisted'), $e::class);
            }
            elseif ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException) {
                return $this->unauthorizedApiResult(ResponseConst::CODE_UNAUTHORIZED, __('messages.token.error.invalid'), $e::class);
            }
            elseif ($e instanceof \Illuminate\Auth\AuthenticationException || $e instanceof \Tymon\JWTAuth\Exceptions\JWTException) {
                return $this->unauthorizedApiResult(ResponseConst::CODE_UNAUTHORIZED, __('messages.error.unauthorized'), $e::class);
            }
            elseif ($e instanceof \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException) {
                return $this->methodNotAllowedApiResult($e);
            }
            elseif ($e instanceof \Illuminate\Database\Eloquent\ModelNotFoundException) {
                return $this->notFoundApiResult(ResponseConst::CODE_MODEL_NOT_FOUND, __('messages.error.model_not_found', ['attribute' => $e->getModel()::class]), $e);
            }
            elseif ($e instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException) {
                return $this->notFoundApiResult(ResponseConst::CODE_NOT_FOUND, __('messages.error.not_found'), $e);
            }
            elseif ($e instanceof \App\Exceptions\DataNotFoundException) {
                return $this->notFoundApiResult(ResponseConst::CODE_NOT_FOUND, __('messages.error.data_not_found'), $e);
            }
            elseif ($e instanceof \App\Exceptions\ActionNotFoundException) {
                return $this->notFoundApiResult(ResponseConst::CODE_NOT_FOUND, __('messages.error.action_not_found'), $e);
            }
        }
        return parent::render($request, $e);
    }
}
